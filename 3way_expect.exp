#!/usr/bin/expect

# An ugly program with lots of hardcoded dependencies for this specific
# connection, just to show how to use expect with scapy.
# Purpose: connect to port 80 of www.cnn.com and send a GET request.
# Close the connection, as per the server's request, afterwards. 

spawn "/usr/bin/scapy";


expect ">>> " 

# PAY ATTENTION TO escape the following chars: " [ and ]

# We generate a random source port number to be able to run the script
# several times

send "sp=[expr {int(rand() *10000)}]\r"

# We build the first SYN packet and send it

send "synpkt=IP(dst=\"www.cnn.com\") / TCP (sport=sp, dport=80)\r"
send "synackpkt=sr1(synpkt, timeout=1) \r"

# The ACK packet is based on the SYN, with different flags and seq. number

send "ackpkt=synpkt.copy()\r"
send "ackpkt\[TCP\].seq=ackpkt\[TCP\].seq + 1 \r"
send "ackpkt\[TCP\].flags=\"A\" \r"

# The ack value in the ACK is obtained from the received SYNACK

send "ackpkt\[TCP\].ack=synackpkt\[TCP\].seq + 1 \r"

# We send the ack

send "send(ackpkt)\r"

# Let us send some payload.
# The DATA packet is based on the ack with different flags and with a payload


send "datapkt=ackpkt.copy() \r"
send "datapkt\[TCP\].flags=\"PA\"\r"
send "datapkt = datapkt / Raw(load=\'GET / HTTP/1.0\\n\\n\') \r"
# the server replies with an ACK before sending the DATA
# we specify "multi" in sr() to indicate that we wait for several packets
send "res, unansw=sr(datapkt,multi = 1,timeout=1)\r"
send "print(\"Answer from the web site: \")\r"
send "res\[1\]\[1\]\[Raw\].load\r"

# In this specific case, the server will close the connection with a FINACK
# We have to ack it and that will be the end of it 

send "finpkt = datapkt.copy() \r"
send "finpkt\[TCP\].flags=\"FA\"\r"
send "finpkt\[TCP\].seq=finpkt\[TCP\].seq + len(datapkt\[TCP\].payload) \r"
send "finpkt\[TCP\].ack=res\[1\]\[1\]\[TCP\].seq + len(res\[1\]\[1\]\[TCP\].payload) + 1\r"
send "finkpkt\[TCP\].ack\r"
send "finpkt\[TCP\].remove_payload()\r"
send "send(finpkt)\r "

send "print(\"Here are the results received to my GET request\")\r"
send "res.summary()\r"
send "print(\"More specifically, here is the payload sent by the server\")\r"
send "res\[1\]\[1\]\[Raw\]\r"


interact


